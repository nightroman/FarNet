.Language=English,English (English)
.PluginContents=Bench
.Options TabSize=4

@Contents
$#PowerShellFar Tests#

PREREQUISITES

Include the directory Bench to the path. Tests may call scripts from there.

SEE ALSO

	~Database Tests~@DataTest@
	~Dialog Tests~@DialogTest@

@DataTest
$#Database Tests#
~Contents~@Contents@

Scripts are designed for SQLite and require the package FarNet.SQLite.

How to play with scripts:

0) Run Initialize-Test.far.ps1 to create a temp database file in %TEMP%.

1) Run Panel-DBTable.ps1 (from Bench), you get tables in TempDB, TestNotes and
TestCategories. Open them by [Enter] and see how they look in basic mode (i.e.
without customisation). Note that you can even perform operations like insert,
delete and update ([F7], [Del], etc.)

2) Run Test-Panel-DBCategories.far.ps1 - the table looks different, the field
CategoryId is hidden because a user normally should not use or even see it,
this information is internal.

3) Run Test-Panel-DBNotes.far.ps1 - it looks even more different, two fields
are hidden. The point of interest is how you modify Category. When you [Enter]
it the Test-Panel-DBCategories.far.ps1 is called and TestCategories is opened
for selection of a category. When in TestCategories panel, you can modify or
add new categories as if you opened it directly in (2).

#KNOWN ISSUES#

If you are about to delete or modify again just added and saved record then at
first you have to re-read the table data explicitly by <CtrlR> (otherwise you
can get concurrency error or record data can be incomplete and etc.).


@TestBase
$#Test-Base.far.ps1#
~Contents~@Contents@

This is just a demo help topic.


@DialogTest
$#Dialog Tests#
~Contents~@Contents@

The script demonstrates most of features and functionality available in FarNet
dialogs:

	- it creates a dialog and sets a help topic from a file in the same folder
	- it adds most of available FarNet dialog items and their different forms
	- it sets items properties before Show() and after Show() (see [Code])
	- it adds a number of various dialog and item event handlers
	- it sets focused and default item and starts Show()
	- it shows how to emulate IDialog.MouseClicked event
	- it shows how to use and draw IUserControl

#[Done]#

When the dialog is closed by [Done] (default button) the script outputs some
occurred events information and current data of the dialog and items.

#[Fail]#

This is just a test of what happens on an error in an event handler.

#[Test]#

Automated test. It invokes test steps with confirmations so that you can watch
each step code or keys and see how each step works. At any time you may choose
[Cancel] to stop stepping or [Continue] to run the remaining steps at once.

#[List]#

Extra test of three list controls (combo edit, combo box, list box). The code
shows how to use DetachItems(), AttachItems() for better performance when
changes are large enough.

#[More]#

This button starts the same dialog to show it is fine to open nested dialogs.

#[Exit]#

'Cancel' button (property IDialog.Cancel): if it is pushed Show() returns false.

#F11 \ PowerShellFar \ Invoke commands#

You can invoke PowerShell commands from dialogs. Thus, you can test a dialog
and its items manually running PowerShell code right there. Variables defined
in the dialog script are available. For example you can type and run:

	$dialog               ## get this dialog properties
	$e1                   ## get the edit properties
	$e1.Text = 'New text' ## assign new text to it
	$e1.Disabled = $true  ## disable it
	$lb.Items.RemoveAt(0) ## remove the first list item
